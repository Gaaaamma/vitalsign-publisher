// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: vitalSignPublish.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VitalSignPublishClient is the client API for VitalSignPublish service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VitalSignPublishClient interface {
	CheckRPNs(ctx context.Context, in *VoidRequest, opts ...grpc.CallOption) (*RPNs, error)
	CheckPatients(ctx context.Context, in *VoidRequest, opts ...grpc.CallOption) (*Patients, error)
	RegisterRPN(ctx context.Context, in *RPN, opts ...grpc.CallOption) (*Msg, error)
	UnregisterRPN(ctx context.Context, in *RPN, opts ...grpc.CallOption) (*Msg, error)
	RegisterPatient(ctx context.Context, in *Patient, opts ...grpc.CallOption) (*Msg, error)
	UnregisterPatient(ctx context.Context, in *Patient, opts ...grpc.CallOption) (*Msg, error)
}

type vitalSignPublishClient struct {
	cc grpc.ClientConnInterface
}

func NewVitalSignPublishClient(cc grpc.ClientConnInterface) VitalSignPublishClient {
	return &vitalSignPublishClient{cc}
}

func (c *vitalSignPublishClient) CheckRPNs(ctx context.Context, in *VoidRequest, opts ...grpc.CallOption) (*RPNs, error) {
	out := new(RPNs)
	err := c.cc.Invoke(ctx, "/vitalsignpublish.VitalSignPublish/checkRPNs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vitalSignPublishClient) CheckPatients(ctx context.Context, in *VoidRequest, opts ...grpc.CallOption) (*Patients, error) {
	out := new(Patients)
	err := c.cc.Invoke(ctx, "/vitalsignpublish.VitalSignPublish/checkPatients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vitalSignPublishClient) RegisterRPN(ctx context.Context, in *RPN, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, "/vitalsignpublish.VitalSignPublish/registerRPN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vitalSignPublishClient) UnregisterRPN(ctx context.Context, in *RPN, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, "/vitalsignpublish.VitalSignPublish/unregisterRPN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vitalSignPublishClient) RegisterPatient(ctx context.Context, in *Patient, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, "/vitalsignpublish.VitalSignPublish/registerPatient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vitalSignPublishClient) UnregisterPatient(ctx context.Context, in *Patient, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, "/vitalsignpublish.VitalSignPublish/unregisterPatient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VitalSignPublishServer is the server API for VitalSignPublish service.
// All implementations must embed UnimplementedVitalSignPublishServer
// for forward compatibility
type VitalSignPublishServer interface {
	CheckRPNs(context.Context, *VoidRequest) (*RPNs, error)
	CheckPatients(context.Context, *VoidRequest) (*Patients, error)
	RegisterRPN(context.Context, *RPN) (*Msg, error)
	UnregisterRPN(context.Context, *RPN) (*Msg, error)
	RegisterPatient(context.Context, *Patient) (*Msg, error)
	UnregisterPatient(context.Context, *Patient) (*Msg, error)
	mustEmbedUnimplementedVitalSignPublishServer()
}

// UnimplementedVitalSignPublishServer must be embedded to have forward compatible implementations.
type UnimplementedVitalSignPublishServer struct {
}

func (UnimplementedVitalSignPublishServer) CheckRPNs(context.Context, *VoidRequest) (*RPNs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRPNs not implemented")
}
func (UnimplementedVitalSignPublishServer) CheckPatients(context.Context, *VoidRequest) (*Patients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPatients not implemented")
}
func (UnimplementedVitalSignPublishServer) RegisterRPN(context.Context, *RPN) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRPN not implemented")
}
func (UnimplementedVitalSignPublishServer) UnregisterRPN(context.Context, *RPN) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterRPN not implemented")
}
func (UnimplementedVitalSignPublishServer) RegisterPatient(context.Context, *Patient) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPatient not implemented")
}
func (UnimplementedVitalSignPublishServer) UnregisterPatient(context.Context, *Patient) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterPatient not implemented")
}
func (UnimplementedVitalSignPublishServer) mustEmbedUnimplementedVitalSignPublishServer() {}

// UnsafeVitalSignPublishServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VitalSignPublishServer will
// result in compilation errors.
type UnsafeVitalSignPublishServer interface {
	mustEmbedUnimplementedVitalSignPublishServer()
}

func RegisterVitalSignPublishServer(s grpc.ServiceRegistrar, srv VitalSignPublishServer) {
	s.RegisterService(&VitalSignPublish_ServiceDesc, srv)
}

func _VitalSignPublish_CheckRPNs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VitalSignPublishServer).CheckRPNs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vitalsignpublish.VitalSignPublish/checkRPNs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VitalSignPublishServer).CheckRPNs(ctx, req.(*VoidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VitalSignPublish_CheckPatients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VitalSignPublishServer).CheckPatients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vitalsignpublish.VitalSignPublish/checkPatients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VitalSignPublishServer).CheckPatients(ctx, req.(*VoidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VitalSignPublish_RegisterRPN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VitalSignPublishServer).RegisterRPN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vitalsignpublish.VitalSignPublish/registerRPN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VitalSignPublishServer).RegisterRPN(ctx, req.(*RPN))
	}
	return interceptor(ctx, in, info, handler)
}

func _VitalSignPublish_UnregisterRPN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPN)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VitalSignPublishServer).UnregisterRPN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vitalsignpublish.VitalSignPublish/unregisterRPN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VitalSignPublishServer).UnregisterRPN(ctx, req.(*RPN))
	}
	return interceptor(ctx, in, info, handler)
}

func _VitalSignPublish_RegisterPatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Patient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VitalSignPublishServer).RegisterPatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vitalsignpublish.VitalSignPublish/registerPatient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VitalSignPublishServer).RegisterPatient(ctx, req.(*Patient))
	}
	return interceptor(ctx, in, info, handler)
}

func _VitalSignPublish_UnregisterPatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Patient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VitalSignPublishServer).UnregisterPatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vitalsignpublish.VitalSignPublish/unregisterPatient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VitalSignPublishServer).UnregisterPatient(ctx, req.(*Patient))
	}
	return interceptor(ctx, in, info, handler)
}

// VitalSignPublish_ServiceDesc is the grpc.ServiceDesc for VitalSignPublish service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VitalSignPublish_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vitalsignpublish.VitalSignPublish",
	HandlerType: (*VitalSignPublishServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "checkRPNs",
			Handler:    _VitalSignPublish_CheckRPNs_Handler,
		},
		{
			MethodName: "checkPatients",
			Handler:    _VitalSignPublish_CheckPatients_Handler,
		},
		{
			MethodName: "registerRPN",
			Handler:    _VitalSignPublish_RegisterRPN_Handler,
		},
		{
			MethodName: "unregisterRPN",
			Handler:    _VitalSignPublish_UnregisterRPN_Handler,
		},
		{
			MethodName: "registerPatient",
			Handler:    _VitalSignPublish_RegisterPatient_Handler,
		},
		{
			MethodName: "unregisterPatient",
			Handler:    _VitalSignPublish_UnregisterPatient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vitalSignPublish.proto",
}
